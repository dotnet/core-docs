### YamlMime:YamlDocument
documentType: Tutorial
title: Branches and loops
metadata:
  title:  Branches and loops
  description: This tutorial teaches you how to select different code to execute based on the values of variables. You'll explore branches and loops in C# interactively, using your browser to write C# and see the results of compiling and running your code.
  audience: Developer
  level: Beginner
  nextTutorialHref: working-with-collections
  nextTutorialTitle: Working with Collections in C#
  displayType: two-column
  interactive: csharp
items:
- durationInMinutes: 1
  content: |
    This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables. You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that explore branching and looping constructs in C#. These lessons teach you the fundamentals of the C# language.
- title: Making decisions using the if statement
  durationInMinutes: 2
  content: |
    Run the following code in the interactive window (type the following line in the window on the right and click the 'Run' button):

    ```csharp
    int a = 5;
    int b = 6;
    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10");
    ```

    Modify the declaration of `b` so that the sum is less than 10: 

    ```csharp
    int b = 3;
    ```

    Because the answer is less than 10, nothing is printed. You've only
    created one of the possible branches for an `if` statement: the true branch.

- title: If and else work together.
  durationInMinutes: 3
  content: |
    
    To execute different code in both the true and false branches, you 
    create an `else` branch that executes when the condition is false. Try this:

    ```csharp
    int a = 5;
    int b = 3;
    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10");
    else
        Console.WriteLine("The answer is not greater than 10");
    ```

    > [!IMPORTANT]
    > The indentation under the `if` and `else` statements is for human readers.
    > The C# language does not treat indentation or whitespace as significant. 
    > The statement following the `if` or `else` keyword will be executed based
    > on the condition.

    Because indentation is not significant, you need to use `{` and `}` to
    indicate when you want more than one statement to be part of the block
    that executes conditionally. C# programmers typically use those braces
    on all `if` and `else` clauses. This example is the same as what you
    just created:

    ```csharp
    if (a + b > 10)
    {
        Console.WriteLine("The answer is greater than 10");
    }
    else
    {
        Console.WriteLine("The answer is not greater than 10");
    }
    ```

    > [!TIP]
    > Through the rest of this tutorial, the code samples all include the braces,
    > following accepted practices.

    You can test more complicated conditions:

    ```csharp
    if ((a + b + c > 10) && (a > b))
    {
        Console.WriteLine("The answer is greater than 10");
        Console.WriteLine("And the first number is greater than the second");
    }
    else
    {
        Console.WriteLine("The answer is not greater than 10");
        Console.WriteLine("Or the first number is not greater than the second");
    }
    ```
    
    The `&&` represents "and". It means both conditions must be true to execute
    the first statement.  These examples also show that you can have multiple
    statements in each conditional branch, provided you enclose them in `{` and `}`.
    
    You can also use  `||` to represent "or":

    ```csharp
    if ((a + b + c > 10) || (a > b))
    {
        Console.WriteLine("The answer is greater than 10");
        Console.WriteLine("Or the first number is greater than the second");
    }
    else
    {
        Console.WriteLine("The answer is not greater than 10");
        Console.WriteLine("And the first number is not greater than the second");
    }
    ```

- title: Repeating operations using loops
  durationInMinutes: 4
  content: |
    The other important concept to create larger programs is **loops**. You'll
    use loops to repeat statements that you want executed more than once. Try
    this code in the interactive window:

    ```csharp
    int counter = 0;
    while (counter < 10)
    {
      Console.WriteLine("Hello World! The counter is " + counter);
      counter++;
    }
    ```

    The `while` statement checks a condition and executes the statement
    following the `while`. It will repeat checking the condition and
    executing those statements until the condition is false.

    There's one other new operator in this example. The `++` after
    the `counter` variable is the **increment** operator. It adds 1
    to the value of counter, and stores that value in the counter variable.

    > [!IMPORTANT]
    > Make sure that the `while` loop condition does switch to
    > false as you execute the code. Otherwise, you create an
    > **infinite loop** where your program never ends. Let's
    > not demonstrate that, because the engine that runs your
    > code will timeout and you'll see no output from your program.

    The `while` loop tests the condition before executing the code
    following the `while`. The `do` ... `while` loop executes the 
    code first, and then checks the condition. It looks like this:

    ```csharp
    int counter = 0;
    do
    {
      Console.WriteLine("Hello World! The counter is " + counter);
      counter++;
    } while (counter < 10);
    ```
    
    This `do` loop and the earlier `while` loop are the same. 
    
    Let's move on to one last loop statement.

- title: Working with the `for` loop.
  durationInMinutes: 4
  content: |
    The final common looping statement that you'll see in C# code is the
    `for` loop. Try this code in the interactive window:

    ```csharp
    for(int counter = 0; counter < 10; counter++)
    {
      Console.WriteLine("Hello World! The counter is " + counter);
    } 
    ```

    This does the same as the `while` loop and the `do` loop you've
    already used. The `for` statement has three parts that control
    how it works. 

    The first part is the **for initializer**: `for counter = 0;` declares
    that `counter` as the loop variable, and sets its initial value to `0`.

    The middle part is the **for condition**: `counter < 10` declares that this
    `for` loop continues to execute as long as the value of counter is less than 10.

    The final part is the **for iterator**: `counter++` specifies how to modify the loop
    variable after executing the block following the `for` statement.

    Experiment with these yourself. Try each of the following:

    - Change the initializer to start at a different value.
    - Change the condition to stop at a different value.
    - Change the iterator to add a value other than 1 to `counter`.

    When you're done, let's move on to write some code yourself to
    use what you;ve learned.

- title: Try it yourself
  durationInMinutes: 12
  content: |
    Now that you've seen the `if` statement and the looping
    constructs in the C# language. See if you can write C# to
    find the some of all integers 1 through 20 that are divisible
    by 3.  Here are a few hints:
    
    - The `%` operator will give you the remainder of a division operation.
    - The `if` statement will give you the condition to see if a number should be part of the sum.
    - The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.

    Try it yourself. Then check how you did.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ```csharp
    int sum = 0;
    for (int number = 1; number < 21; number++)
    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }
    Console.WriteLine("The sum is " + sum);
    ```
    You've completed the "looping and branching" tutorial.
