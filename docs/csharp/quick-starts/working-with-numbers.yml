### YamlMime:YamlDocument
documentType: Tutorial
title: Working with numbers
metadata:
  title:  Working with numbers in C#
  description: This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that explore numbers and math operations in C#. These lessons teach you the fundamentals of the C# language.
  audience: Developer
  level: Beginner
  nextTutorialHref: branching-and-loops
  nextTutorialTitle: Branches and loops in C#
  displayType: two-column
  interactive: csharp
items:
- durationInMinutes: 1
  content: |
    This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that explore numbers and math operations in C#. These lessons teach you the fundamentals of the C# language.
- title: Exploring integer math
  durationInMinutes: 2
  content: |
    Run the following code in the interactive window (type the following line in the window on the right and click the 'Run' button):

    ```csharp
    int a = 18;
    int b = 6;
    int c = a + b;
    Console.WriteLine(c);
    ```

    You've just seen one of the fundamental math operations with integers. The `int` type represents an **integer**, a positive or negative whole number. You use the `+` symbol for addition. Other common mathematical operations for integers include:

    - `-` for subtraction
    - `*` for multiplication
    - `/` for division.

    > [!TIP]
    > Throughout this tutorial, you can try explore on your own by modifying the code you've written in the interactive window. This tutorial provides examples that you can try at each step.

    Start by exploring those different operations. Modify the third line to try each of these operations. After each edit, click the 'Run' button.

    Subtraction:

    ```csharp
    int c = a - b;
    ```

    Multiplication:

    ```csharp
    int c = a * b;
    ```

    Division: 

    ```csharp
    int c = a / b;
    ```
    
    You can also experiment by performing multiple mathematics operations in the same line, if you'd like.

- title: Exploring order of operations
  durationInMinutes: 3
  content: |
    The C# language defines the precedence of different mathematics operations
    so that the rules are consistent with the rules you learned in mathematics.
    Multiplication and division take precedence over addition and subtraction.
    Explore that by running the following code in the interactive window:

    ```csharp
    int a = 5;
    int b = 4;
    int c = 2;
    int d = a + b * c;
    Console.WriteLine(d);
    ```

    The output demonstrates that the multiplication is performed before the addition.

    You can enforce the order of operation by adding parentheses around
    the operation or operations you want performed first:

    ```csharp
    int a = 5;
    int b = 4;
    int c = 2;
    int d = (a  + b) * c;
    Console.WriteLine(d);
    ```

    Explore more by combining many different operations. Try something like this:

    ```csharp
    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
    ```

    You may have noticed an interesting behavior for integers. Integer
    division always produces an integer result, even when the mathematic
    result would include a decimal or fraction portion.

    If you haven't seen this behavior, try the following:

    ```csharp
    int a = 7;
    int b = 4;
    int c = 3;
    int d = (a  + b) / c;
    Console.WriteLine(d);
    ```

    Click 'Run' again to see the results.
- title: Integer precision and limits
  durationInMinutes: 4
  content: |
    That last sample showed you that integer division truncates the result.
    You can get the **remainder** by using the **modulo** operator, the `%` character:

    ```csharp
    int a = 7;
    int b = 4;
    int c = 3;
    int d = (a  + b) / c;
    int e = (a + b) % c;
    Console.WriteLine("quotient: " + d);
    Console.WriteLine("remainder: " + e);
    ```

    The C# integer type differs from mathematical integers in one other
    way: the `int` type has minimum and maximum limits. Run this code
    in the interactive window to see those limits:
    
    ```csharp
    int max = int.MaxValue;
    int min = int.MinValue;
    Console.WriteLine("The range of integers is " + min + " to " + max);
    ```

    You get 

    ```csharp
    int max = int.MaxValue;
    int min = int.MinValue;
    Console.WriteLine($"The range of integers is {min} to {max}");
    int what = max + 3;
    Console.WriteLine("an example of overflow: " + what);
    ```
    
    Notice that the answer is very close to the minimum (negative) integer.
    The addition operation **overflowed** the allowed values for integers.

    There are other numeric types with different limits and precision that you
    would use when the `int` type does not meet your needs. Let's example those next.

- title: Working with the double type.
  durationInMinutes: 4
  content: |
    The `double` numeric type represents a double-precision floating point
    number. Those terms may be new to you. A **floating point** number is
    useful to represent non-integral numbers that may be very large, or small
    in magnitude. Try the code below in the interactive window and see what the result is.

    ```csharp
    double a = 5;
    double b = 4;
    double c = 2;
    double d = (a  + b) / c;
    Console.WriteLine(d);
    ```

    Notice that the answer includes the decimal portion of the quotient. Try a slightly
    more complicted expression with doubles:

    ```csharp
    double a = 19;
    double b = 23;
    double c = 8;
    double d = (a  + b) / c;
    Console.WriteLine(d);
    ```

    The range of a double value is much greater than integer values. Try the following
    code in the interactive window:

    ```csharp
    double max = double.MaxValue;
    double min = double.MinValue;
    Console.WriteLine("The range of double is " + min + " to " + max);
    ```

    These values are printed out to represent scientific notation. The number to
    the left of the `E` is the signifant. The number to the right is the exponent,
    as a power of 10. Internally, these numbers are represented similarly, but in 
    a binary form. One part represents the significant binary digits.
    Another part represents where to place the binary point (analogous to a decimal point) relative to
    those significant digits.

    Just like decimal numbers in math, doubles in C# can have rounding error. Try this code:

    ```csharp
    double third = 1.0 / 3.0;
    Console.WriteLine(third);
    ```
    
    You know that `0.3` repeating is not exactly the same as `1/3`.

- title: Fixed point types
  durationInMinutes: 4
  content: |
    You've seen the basic numeric types in C#: integers and doubles.  There is one
    other type to learn: the `decimal` type. The `decimal` type has a smaller
    range, but greater precision than `double`. Let's take a look:

    ```csharp
    decimal min = decimal.MinValue;
    decimal max = decimal.MaxValue;
    Console.WriteLine("the range of the decimal type is " + min + " to " + max);
    ```

    ***Challenge***

    Now that you've seen the different numeric types, write code that calculates
    the area of a circle whose radius is 2.50 inches. Remember that the area of a circle
    is the radius squared multiplied by PI. One hint: C# contains a constant
    for PI: `Math.PI` that you can use for that value. 

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ```csharp
    double radius = 2.50;
    double area = Math.PI * radius * radius;
    Console.WriteLine(area);
    ```
- content: |
    You've completed the "working with numbers" tutorial.
