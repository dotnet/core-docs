### YamlMime:YamlDocument
documentType: Tutorial
title: Hello C#
metadata:
  title:  Hello C#. Your first introduction to the C# language.
  description: This tutorial teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that begin with a "Hello World" program. These lessons teach you the fundamentals of the C# language.
  audience: Developer
  level: Beginner
  nextTutorialHref: working-with-numbers
  nextTutorialTitle: Working with numbers in C#
  displayType: two-column
  interactive: csharp
items:
- durationInMinutes: 1
  content: |
    This tutorial teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that begin with a "Hello World" program. These lessons teach you the fundamentals of the C# language.
- title: Run your first c# program
  durationInMinutes: 2
  content: |
    Run the following code in the interactive window (type the following line in the window on the right and click the 'Run' button):

    ```csharp
    Console.WriteLine("Hello World!");
    ```

    Congratulations! You've run your first C# program. Now, replace the two lines above with these:
- title: Declare and use variables
  durationInMinutes: 3
  content: |
    Your first program printed the `string` "Hello World!" on
    a screen. The rest of this lesson explores working with
    the `string` type, which represents text in C#.

    Your first program is limited to printing one message. You can write more
    useful programs by using **variables**. A **variable** is a symbol you can
    use run the same code with different values. Let's try it.

    ```csharp
    string firstName = "Bill";
    Console.WriteLine(firstName);
    ```

    Those lines declare a variable, `name` and assigns it a value, "Bill". Then, it
    prints out the name.

    You can assign different values to any variable you declare. You can change
    the name to one of your friends. Add these two lines in the interactive window above:

    ```csharp
    string firstName = "Bill";
    Console.WriteLine(firstName);
    firstName = "Maria";
    Console.WriteLine(firstName);
    ```

    Notice that the same line of code prints two different messages, based on
    the value stored in the `firstName` variable.

    You may have also noticed the "Hello" was missing in the last two messages. Let's fix
    that now.  Modify the last line to the following:

    ```csharp
    Console.WriteLine("Hello " + firstName);
    ```

    Click 'Run' again to see the results.
- title: Work with strings
  durationInMinutes: 4
  content: |
    Your last edit was our first look at what you can do with strings. Let's explore more.

    The `+`, when applied to strings, creates a new string with the text from the first followed by the text from the second. This is referred to as *string concatenation*. You can combine any number of strings, including string variables.  Try this:

    ```csharp
    string firstName = "Maria";
    string aFriend = "Sage";
    Console.WriteLine("My friends are " + firstName + " and " + aFriend);
    ```

    As you explore more with strings, you can find the length of a string using `Length`.  Add the following code at the bottom of the interactive window:

    ```csharp
    Console.WriteLine("The name " + firstName + " has " + firstName.Length + " letters");
    Console.WriteLine("The name " + aFriend + " has " + aFriend.Length + " letters");
    ```

    > [!TIP]
    > This is a good time to explore on your own. You've learned that `Console.WriteLine()`
    > writes text to the screen. You've learned how to declare variables and
    > concatenate strings together. Experiment in the interactive window. Write
    > some more messages yourself. Build strings using the `+` operator.
- title: Do more with strings
  durationInMinutes: 4
  content: |
    Another useful method is Trim, and related methods TrimStart and TrimEnd. These methods remove leading and trailing spaces:

    ```csharp
    string message = "      Hello World!       ";
    Console.WriteLine("[" + message + "]");

    string trimmedMessage = message.TrimStart();
    Console.WriteLine("[" + trimmedMessage + "]");

    trimmedMessage = message.TrimEnd();
    Console.WriteLine("[" + trimmedMessage + "]");

    trimmedMessage = message.Trim();
    Console.WriteLine("[" + trimmedMessage + "]");
    ```

    This sample reinforces a couple important concepts for working with strings. The methods that manipulate strings return new string objects rather than making modifications in place. You can see that each call to any of the Trim methods returns a new string, but does not change the original message.

    Other methods perform more general edits on a string. You've probably used a search and replace command in an editor or word processor. The Replace method substitutes a replacement string for all occurences of a sub-string in a string. Try it for yourself. Add this code above:

    ```csharp
    string message = "Hello World!";
    Console.WriteLine(message);
    message = message.Replace("Hello", "Greetings");
    Console.WriteLine(message);
    ```

    Two other useful methods make a string ALL CAPS or all lower case. Try this code above:

    ```csharp
    string message = "Hello World!";
    Console.WriteLine(message);
    Console.WriteLine(message.ToUpper());
    Console.WriteLine(message.ToLower());
    ```
- title: Search strings
  durationInMinutes: 4
  content: |
    The other part of a *search and replace* operation is to find text in a
    sring. You can use the the `Contains` method for searching. It
    tells you if a method contains a sub-string inside it. Try the following
    code to explore `Contains`:

    ```csharp
    string message = "You say goodbye, and I say hello";
    Console.WriteLine(message.Contains("goodbye"));
    Console.WriteLine(message.Contains("greetings"));
    ```

    The `Contains` method returns a **boolean** value which tells you if the
    string you sought was found. A **boolean** stores either a `true` or a
    `false` value. You'll learn more about **boolean** values
    in a later lesson.

    ***Challenge***

    There are two similar methods, `StartsWith` and `EndsWith` that also search for sub-strings in a string. These find a sub-string at the beginning or the
    end of the string. Try to modify the sample above to use `StartsWith` and
    `EndsWith` instead of `Contains`.
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    ```csharp
    string message = "You say goodbye, and I say hello";
    Console.WriteLine(message.StartsWith("You"));
    Console.WriteLine(message.StartsWith("goodbye"));

    Console.WriteLine(message.EndsWith("hello"));
    Console.WriteLine(message.EndsWith("goodbye"));
    ```
- content: |
    You've completed the "Hello C#" tutorial.
